{
	"info": {
		"_postman_id": "be5f191b-19af-4e85-aeb8-bb3bdf8d9d1b",
		"name": "ClassSchedule_PW",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9637509"
	},
	"item": [
		{
			"name": "Get data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var rb = pm.response.json();",
							"pm.test(\"Verify response data\", function() {",
							"    pm.expect(rb).to.not.equal(null);",
							"    pm.expect(rb.payload).to.not.equal(null);",
							"     pm.expect(rb.payload.data).to.not.equal(null);",
							"});",
							"var saveNewBody = { \"payload\":{}};",
							"saveNewBody.payload=rb.payload.data;",
							"saveNewBody.payload.finalCountRegisteredStudents=2;",
							"saveNewBody.payload.numberRegisteredStudents=2;",
							"",
							"pm.globals.set(\"gSaveNewRequestBody\", JSON.stringify(saveNewBody));",
							"//console.log(pm.globals.get('gSaveNewRequestBody'));",
							"console.log(\"--------------------------------------------------------------------------------------\");",
							"",
							"",
							"pm.test(\"Verify response data and properties\", function() {",
							"    var rb = pm.response.json();",
							"    pm.expect(rb).to.not.be.null;",
							"    pm.expect(rb).to.have.property('payload');",
							"    pm.expect(rb.payload).to.have.property('data');",
							"    var data = rb.payload.data;",
							"    pm.expect(data).to.not.be.null;",
							"    pm.expect(data).to.have.property('finalCountRegisteredStudents');",
							"    pm.expect(data).to.have.property('numberRegisteredStudents');",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Payload data should exist and be an object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.payload).to.be.an('object');",
							"    pm.expect(responseData.payload.data).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Notifications array should be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.notifications).to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Payload data should exist and be an object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.payload).to.exist.and.to.be.an('object');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ZetaTitans@12",
							"type": "string"
						},
						{
							"key": "username",
							"value": "automationuser@CampusNexus.Dev",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"payload\": {\r\n        \"id\": 8723\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/commands/Academics/ClassSection/Get",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"commands",
						"Academics",
						"ClassSection",
						"Get"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"test grlobal test course code\", function () {",
							"    const responseData = pm.response.json();",
							"    console.log(responseData.payload.data.courseCode)",
							"     pm.expect(responseData.payload.data.courseCode).equal('GS6385');",
							"});",
							"",
							"pm.test(\"Meeting patterns array is present and has expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('payload');",
							"    pm.expect(responseData.payload).to.have.property('data');",
							"    pm.expect(responseData.payload.data).to.have.property('meetingPatterns').that.is.an('array');",
							"    pm.expect(responseData.payload.data.meetingPatterns.length).to.equal(0); // Replace 0 with the expected number of elements",
							"});",
							"",
							"",
							"pm.test(\"Enrollment status clock hours and credit hours are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.payload.data.enrollmentStatusClockHours).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.payload.data.enrollmentStatusCreditHours).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"",
							"",
							"/*",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"*/",
							"",
							"",
							"",
							"pm.test(\"Entity state is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.have.property('payload');",
							"    pm.expect(responseData.payload).to.have.property('data');",
							"    pm.expect(responseData.payload.data).to.have.property('entityState').that.is.a('number').and.is.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Notifications array is empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.notifications).to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Enrollment status clock hours and credit hours should not be null\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.payload.data.enrollmentStatusClockHours).to.not.be.null;",
							"    pm.expect(responseData.payload.data.enrollmentStatusCreditHours).to.not.be.null;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "ZetaTitans@12",
							"type": "string"
						},
						{
							"key": "username",
							"value": "automationuser@CampusNexus.Dev",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{gSaveNewRequestBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/commands/Academics/ClassSection/Save",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"commands",
						"Academics",
						"ClassSection",
						"Save"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}